Week 1 notes:

Collection vs Collections Framework vs java.util.Collections:
Collection is the interface that is the root of the Collections Framework.
Collections Framework is a feature in java.util that provides commonly used data structures
java.util.Collections is a utility class for working with objects that implement Collection


Exceptions: Exceptions exist to notify developers of and allow them to handle "exceptional behaviour".
- behaviour that is outside of our intended behaviour, or state that is outside of our intended state can cause Exceptions
- Exceptions only occur when something is going wrong, but we're happy to have them as developers because they help us handle
	those problems.
- Exceptions are Java objects, specifically java.lang.Exception
- When an Exception occurs, we say that the Exception was *thrown*.
- When an Exception is dealt with and the problem resolved, we say that the Exception was *handled*
- The first step to handling an Exception is to *catch* that Exception.
- When we want to cause an Exception to occur, we *throw* it.

As developers, we need to make use of both halves of the above behaviour.  We will catch and handle Exceptions in our code
and we'll throw Exceptions when something goes wrong.

An unhandled Exception will crash your program.
A handled Exception allows the program to continue.

Related Java keywords:
"throw" will let you throw an Exception.
"try", "catch", and "finally" allow you to handle Exceptions.
"throws" specifies that an Exception won't be handled by a given method. (we'll see this tomorrow)

We'll use the throw keyword to throw an Exception when a problem has occurred in our code
We'll use try-catch-finally to handle an Exception thrown elsewhere in our code
We'll use throws to "pass the buck" and not handle an Exception in a given method.


Scanner (quick):
A Scanner is a convenience object in Java that enables console input.
We use a scanner to take input from the user of our application.
We typically switch on the user input to let the user choose application functionality.


Exceptions vs. Errors:
java.lang.Exception and java.lang.Error are both subclasses of a class called java.lang.Throwable.
Any object that is Throwable works with the "throws", "try", "catch", "throw", "finally" keywords.
java.lang.Exception works with these keywords only because it is Throwable.  java.lang.Error is the same way.
The big difference between Exceptions and Errors is how we are expected to handle them.
An Exception we should attempt to recover from -- we use try-catch to catch the Exception then
write appropriate logic to handle it in our catch blocks.
An Error, on the other hand, can almost never be fixed and we ought just let the program crash.
Most Errors have to do with problems with the JVM like java.lang.StackOverflowError (out of space on the stack)
and java.lang.OutOfMemoryError (out of space on the heap).


What is RuntimeException?
We've been using RuntimeException instead of Exception.  The reason is that RuntimeException and its child
classes are *unchecked Exceptions*. This is in contrast to Exception (and all non-RuntimeExceptions), which
 are *checked exceptions*.  Unchecked vs checked refers to whether the compiler enforces that you handle
a given Exception.  Unchecked vs checked refers the *the compiler* checking whether you have Exception
handling logic.

In Java, we're expected to handle any Exception we can anticipate.  It's good practice.  Some Exceptions 
the compiler can anticipate.  It forces us to write code to handle those exceptions before it will compile.
Those are checked Exceptions.
Some other Exceptions are difficult for the compiler to anticipate.  In these cases, its good practice to
write code to handle those Exceptions, but the compiler can't force us to do it.

Example checked Exceptions:
FileNotFoundException when working with files
SQLException when reading/writing to a database
^ The compiler knows that these might occur every time we try to work with files or with databases,
so these are checked Exceptions.

Example unchecked Exceptions:
ArrayIndexOutOfBoundsException
ClassCastException
ArithmeticException
^ These exceptions might or might not occur any time we're working with Arrays, casting, or division,
so these are unchecked exceptions -- the compiler doesn't know where they might happen.



Wednesday:

More Maven: Maven is a build automation and dependency management tool.
Builds in Maven are automated and split into a series of steps called the Maven build lifecycle.
We'll use the default maven build lifecycle, but know that it is customizable.
It can produce test reports, build your project as a "docker image" (don't worry about what this means just yet),
run multiple testing steps, build for multiple environments, ... plugins enable almost any build functionality you need.
The default build lifecycle is 7 steps.  We should focus on the first 4:
1: validate -- checks the POM and the project directory to ensure Maven project is valid and can be built
2: compile -- compiles your .java code into bytecode to be run.
3: test -- runs any JUnit tests in src/test/java.  This will provide a printout with successes/failures on the console.
4: package -- takes all of your compiled java files and places them in a single archive file, most commonly a .jar file.
	.jar files are java archives and they provide an easy way to share, move, deploy your completed java project.
	We call files like .jar files produced from a build "artifacts".
5: verify -- ensure package was produced correctly
6: install -- add package to local maven repository
7: deploy -- add package to central maven repository
All of the dependencies we get using Maven were built using this lifecycle and it's the deploy step that makes them available to us.

Maven repository: a location that Maven uses to store packaged dependencies.  There is a local repo on our machine, and 
a central repo on mvnrepository.com.  For any dependencies we include in our projects, maven first checks the local repo,
then downloads from the central repo to the local repo if necessary.  Any .jar files (packages, dependencies) in our local repo
are available to our Maven projects.  We just need to add the <dependency>...</dependency> tag.

Your local maven repository is found in ~/.m2, or C:/Users/YourUsername/.m2
If your maven project is not working, it can help to delete the .m2 folder and redownload dependencies.

When we want to run the maven build lifecycle, we can use "Maven goals" in STS, or we can use the command line
with commands like "mvn package".
Regardless of how we execute build lifecycle steps, running a step always runs all prior steps.
So if we run "mvn package", maven will validate, compile, test, and then package.
If we run "mvn test", maven will validate, compile, then test.

Run .jar files with the -jar flag on the command line.

The pom.xml file is the first XML file that we've seen.  XML is very common for configuration files.
XML stands for eXtensible Markup Language.  XML is structured with tags that come in pairs.  Each element in
an XML file has an opening tag <tag> and a closing tag </tag> with some amount on content in between.

Some XML elements in our POM:
<project> ... </project> contains all other elements
<dependencies> ... </dependencies> contains all dependencies
<dependency> ... </dependency> contains information for a single dependency.

One of Java's selling points is automatic memory management.  In some other languages
you must manually allocate and deallocate memory.  The space for new Objects on the heap is automatically
provided in Java.  This handles automatic allocation.
Java also frees up memory automatically.  Objects that are on the heap and no longer being used
have their memory freed up (deallocated) to be used for new objects.  This process is called garbage collection.

When is an object elligible for garbage collection?  Objects can be garbage collected, or removed from the heap,
once no more references to them exist.  You will never make use of a reference and discover the object has
been removed.  objects ARE ONLY EVER REMOVED by the garbage collector when there are no more references.

Does this happen in the JVM? yes, the JVM is responsible for garbage collection.  In addition, garbage collection
occurs during your running program.  If you shut down the program, the stack and heap are totally removed.

Whats the difference between stack and heap for GC? GC only affects the Heap. GC only deals with Objects.
Memory on the stack is freed up as method calls pop off the stack.

If we never get rid of all of the references to any of our objects (all objects maintain at least one reference),
Then garbage collection will never be able to clean up the Heap.  If we create too many objects and the garbage collector
can't clean them up, we'll get a java.lang.OutOfMemoryError.  Most often OutOfMemoryErrors are caused by *memory leaks*,
where we accidentally maintain references to unused objects.  Short version: we care about GC because we want to avoid memory leaks.

The Garbage Collector is highly optimized and runs on its own.  We can suggest that it run with System.gc(), 
but there's no guarantee that it will.

Every Object in Java has a finalize() method that the garbage collector should call while it destroys the object.
In fact, finalize is not always called, we shouldn't rely on it being called, and its use is discouraged.


Thursday:

Maps: A Map is a data structure that contains key, value pairs.  A map is like a dictionary.  The words in a dictionary are like
 keys in the Map.  The definitions in a dictionary are like values.  In a dictionary we look up definitions by their words,
 and in a Map we look up values using their keys.  We often say a value is "stored under" a key in a Map.
 
If we were creating a dictionary in Java, we'd use a map that had Strings for both key and value.  Maps in Java aren't
 restricted to using String keys, but Strings are common.
 
Map is an interface in Java, that is considered part of the Collections Framework even though it does not implement Collection.
 It's still considered part of the framework because we can retrieve both the keys and the values of a Map as Collections.

HashMap is the default concrete class that implements Map.  All maps have methods to retrieve values using keys, to
 store values under keys, and to retrieve Collections of their keys and/or values.

In Java, HashSet's implementation actually just uses HashMap under the hood.  TreeSet's implementation uses TreeMap under the hood.
 HashSets are HashMaps where the values don't matter, and TreeSets are TreeMaps where the values don't matter.  Everything
 we know about HashSet and TreeSet apply to the keys of HashMap and TreeMap.


Threads: A thread is a single flow of program execution. Thus far, we've been writing single-threaded programs,
 and we've only had one flow of execution.  The flow of execution in Java happens via the stack.  So, when we write
 multi-threaded Java programs, we'll have multiple flows of execution, so we'll have multiple stacks.
 
 When we have multiple threads, our program can execute more than one statement at the same time.  Multithreaded programs
 can multitask, they can do 2 or 3 or 4 or many different things at the same time.  Each thread gets its own flow of execution,
 so each thread can execute one statement at a time.
 
The stack that we're familiar with, that the JVM starts by calling main(), works the same as it always has.
Other threads that we start up in our program will have a run() method instead of a main() method at the bottom of their stacks.
We will write the run() method for each Thread to specify that thread's functionality.  run() is like main() for all other threads.

Regardless of how many threads we have, there is always only one Heap.  All threads share the Heap.

Is there a limit on the number of stacks we can have? Yes, but it's very high.  You can change that limit by modifying arguments
to the JVM, but realistically we'll never hit the limit.  We could have 1000 stacks no problem.

How do we create multiple Stacks? Every Thread we create will automatically get its own stack.  When that Thread is done running, its
stack will automatically disappear.

Is this asynchronous programming? Yes.  All asynchronous programming involves multiple threads.

1000 Threads in Java doesn't necessarily mean that 1000 Threads are executing at the same time.  Threads can wait to obtain
the processing power they need execute.  Default behaviour for many Threads is to execute round-robin style.  Thread 1 runs a statement,
then Thread 2, then Thread 3, then ...

Multithreading enables "parallel processing" where your computer/program does more than one thing at the same time, but
this is limited by your hardware.

There are multiple ways of creating new threads in Java.  We'll start with the best (most preferred) way.
To create a new Thread and run it, we'll follow these steps:
1. create a class that implements the Runnable interface
2. implement the run() method on this class.  The run() method specifies what you want your thread to do.
3. in your Java program, create a new Thread(Runnable runnable) and pass in an instance of the class created in (1).
4. Finally, call the start() method on the Thread created in (3).
 
Another way to create a new thread is to extend the Thread class and override its run() method.  run() is still
going to be the method on the bottom of the stack, but the process is slightly different.
1. create a class that extends Thread
2. implement the run() method on this class.
3. in your Java program, create a new instance of the class created in (1).
4. Finally, call the start() method on the object created in (3).
 

A common usecase for multithreading is having some expensive (in time)computation and you'd like
to do it in the background.  This lets your regular program flow continue normally.


Friday:

The synchronized keyword enables a monitor lock, that prevents more than one thread from running a method or
accessing an object at the same time.

Marking methods as synchronized means that we can't take advantage of the speed of multithreading with those methods.
If I have an expensive computation that isn't synchronized and I have 4 different threads run it, the computations will
complete 4 times faster.  We call this parallel processing.

Use of the synchronized keyword means that even if I have 4 threads, only 1 will be able to do the computation at
any time, the others will be waiting.  A series of computations that must proceed in order like this are called
"serial", and this is serial processing.


Using monitor locks (and other kinds of locks, in the future), to solve your multithreading problems is
a good thing to do.  If we don't make use of them, we end up with "race conditions" where the functionality
of our program depends on how quickly each thread runs.  This makes our programs "nondeterministic", meaning
we can't say for certain what they will do in any given run.











