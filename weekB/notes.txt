Notes will go in this file for today.

TODOs for the day:
- Exceptions x
- Testing
- JUnit
- Map Interface (bonus!) x
- Basic Maven

Extras:
- fibonacci
- StringBuilder/StringBuffer

StringBuilder (quick):
If we're building a String in many pieces, we end up using extra memory
"a" + "b" + "c" + "d" + ...
Each String produced "on the way" takes up memory.
A StringBuilder lets us produce a String piece-by-piece more efficiently


Splitting code out into methods:
Up to this point, we've been writing long main methods
this is a bad practice.
Instead, we should be splitting functionality off into methods
our code will be easier to follow and more reusable
if main calls a series of other methods rather
than being a long list of instructions


JUnit: A very popular utility for Unit Testing in Java.
Testing is ensuring that your code functions as intended.  We write tests
to check that the output of our methods is what it should be, we write tests
to ensure we can connect to a DB successfully, we write tests to make sure
our website works.... All of the different parts and functionalities of your
program can be tested.
The most basic tests are called "Unit Tests".  These are tests that ensure
an individual method is working as intended.  They automate the process we already
do after writing a method: pass in values and make sure the output is as expected!

Is Unit Testing run by the JVM? yes, with the help of a tool called JUnit.
However, we run tests separately from running the program, normally ahead of time.

Do we produce the values for tests? Yes, we write both the input values to pass
in to methods AND the expected output.

The biggest payoff for using Unit tests (and other tests) occurs in a large project
Unit testing can make sure your entire project works without any individual person
having to "manually test".

To write Unit tests, we need to add JUnit to our project.  To do so:
1) go to mvnrepository.com
2) search for JUnit in the box at the top
3) click on JUnit (NOT JUnit Jupiter)
4) click on 4.13 to select that version
5) copy the dependency text in the box at the bottom of the screen
6) open up the pom.xml in your project
7) after </version>, type "<dependencies>" -- it should add "</dependencies>"
	afterwards automatically
8) between the two dependencies tags, paste the code from mvnrepository
9) save the file, and refresh Maven (Alt+f5 or similar)

In our maven projects, tests go in src/test/java.  We typically
create packages that match src/main/java

We are writing our first test.  We're going to test that
produceStringOfAs(0) => "".
Typically we name our tests something long and descriptive.
We make sure to call the method we're testing in our test to produce a result
Then we use JUnit Assert methods to assert the result is what we expect.

Unit testing, what we do with JUnit, is the most basic level of testing.
Often projects will have many many unit tests.  At a higher level, if we're
testing how more than one method or function works together, we call that
an "Integration Test".  An integration test might be used to make sure we're
writing to file successfully.  A good way to recognize an integration test
is that integration tests will rely on multiple classes or on resources
outside of Java (files, databases, internet connections, ...).

Another high-level testing concept we should be familiar with is
TDD: Test Driven Development.  TDD is a style of writing code in which we write
unit tests first, THEN write the code to pass them.
After writing the tests, they'll all fail at first.  Then you write code to
pass those tests until all of the tests pass and your method(s) are complete.
TDD is especially useful if you have a complicated or confusing method to write.

We'll do a little TDD today: a calculator with fibonacci numbers

We'll have our calculator have some methods: add, subtract, multiply, divide.
We'll also give it fibonacci(int n) methods that return the nth fibonacci number
Fibonacci numbers are a series of numbers that start at 1 and are produced
iteratively by adding the prior 2 numbers in the series together.
example:
1 1 2 3 5 8 13 21 34 55 89 ...

In TDD, we write our tests first, so let's head to the src/main/test folder
in a new tdd project

Maven: Build Automation & Dependency Management Tool

Build Automation: it runs our "javac" and "java" commands for us.  It will
also run our tests.
Dependency Management: maven downloads and "installs" any dependencies our
Java projects need.  We just need to place the dependency details in the POM
and Maven does the rest.  We saw this with JUnit today.

A Maven project has code in src/main/java and tests in src/test/java.

Finally, a Maven project is configured in the pom.xml.  POM stand for
Project Object Model.

Recursive Fibonacci:
The recursive step is a little bit different than prior examples.
Our recursive fibonacci function calls itself twice instead of once.

int recursiveFibonacci(int n) {
	//exit condition or base case
	if(n <= 1) {
		return 1;
	}
	//recursive step
	return recursiveFibonacci(n-1) + recursiveFibonacci(n-2);
}







